#!/bin/bash
###################################################################################
#
#	脚本功能: 
#		定向数据的格式比较混乱，部分内容不需要。
#		因此将定向数据格式化为我们需要的数据格式。
#	输入的数据格式为:
#		以\t分割，第8字段为obj_url，第9字段为from_url，第13字段为tags
#	格式化后的数据格式为:
#		obj_url \t from_url	\t tags
#
###################################################################################
#	基本数据目录
# 	filename 		程序正在执行的脚本文件名
# 	temp			程序中间生成的临时文件目录
#	input			主程序的原始输入目录，手工提供的数据
#	swap			本脚本或者其他脚本的输入/输出文件目录，供脚本之间传递输入输出
#	output			主程序的输出文件
#	today			今天的日期，格式是类似于 "20120802"
filename=`echo $0 | awk -F'[./]' '{ print $(NF - 1)}'`
temp="./data/temp/"${filename}
input="./data/input"
swap="./data/swap"
output="./data/output"
today=`date +%Y%m%d`
###################################################################################

# 输入输出文件 
objs_dingxiang=${input}"/objs_all";
out=${swap}"/dingxiang_data_normalized";

##################################################################################
# 代码开始
#

awk -F '\t' '{
    # objURL    fromURL     tags
    if (!mark[$8]) {
		print $8"\t"$9"\t"$13;
		mark[$8] = 1;
	}
}' ${objs_dingxiang} > ${out}

if [ ${?} -ne 0 ]
then 
    echo "[错误]	归一化定向（合作）数据失败!"
    exit 1
fi

echo -e "[输出]	格式化定向数据完成. 输出文件为 ${out}"
